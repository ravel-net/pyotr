---------------------------------------------------------------------------
--
-- ternarybit.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2021, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/ternarybit.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'ternarybit' which represents
--	ternarybit numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/ternarybit$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/ternarybit.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'ternarybit_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'ternarybit'
-- does not exist yet but that's okay.

CREATE FUNCTION ternarybit_in(cstring)
   RETURNS ternarybit
   AS '_OBJWD_/ternarybit'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'ternarybit_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION ternarybit_out(ternarybit)
   RETURNS cstring
   AS '_OBJWD_/ternarybit'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'ternarybit_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

--CREATE FUNCTION ternarybit_recv(internal)
--   RETURNS ternarybit
--   AS '_OBJWD_/ternarybit'
--   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'ternarybit_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

--CREATE FUNCTION ternarybit_send(ternarybit)
--   RETURNS bytea
--   AS '_OBJWD_/ternarybit'
--   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

-- TODO: Not specifiying alignment and internal length
CREATE TYPE ternarybit (
   input = ternarybit_in,
   output = ternarybit_out
   -- receive = ternarybit_recv,
   -- send = ternarybit_send,
   -- alignment = double
);


-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_ternarybit (
	a	ternarybit,
	b	ternarybit
);

-- data for user-defined types are just strings in the proper textual
-- representation.

INSERT INTO test_ternarybit VALUES ('10x1', 'xz1z10');
INSERT INTO test_ternarybit VALUES ('xxxxxx', 'zzzzzzzz');
INSERT INTO test_ternarybit VALUES ('xxxxxx', 'zzzzzzzz');
INSERT INTO test_ternarybit VALUES ('1011xz10z', '1001001');

-- INSERT INTO test_ternarybit VALUES ('1011xz10z1','1001001');
-- INSERT INTO test_ternarybit VALUES ('x', '192.168.2.1');

SELECT * FROM test_ternarybit;

-----------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for ternarybit types. Since POSTGRES
--	supports function overloading, we'll use + as the add operator.
--	(Operator names can be reused with different numbers and types of
--	arguments.)
-----------------------------

-- first, define a function ternarybit_add (also in ternarybit.c)

-- CREATE FUNCTION ternarybit_add(ternarybit, ternarybit)
--    RETURNS ternarybit
--    AS '_OBJWD_/ternarybit'
--    LANGUAGE C IMMUTABLE STRICT;

-- we can now define the operator. We show a binary operator here but you
-- can also define a prefix operator by omitting the leftarg.

-- CREATE OPERATOR + (
--    leftarg = ternarybit,
--    rightarg = ternarybit,
--    procedure = ternarybit_add,
--    commutator = +
-- );


-- SELECT (a + b) AS c FROM test_ternarybit;

-- Occasionally, you may find it useful to cast the string to the desired
-- type explicitly. :: denotes a type cast.

-- SELECT  a + '(1.0,1.0)'::ternarybit AS aa,
--         b + '(1.0,1.0)'::ternarybit AS bb
--    FROM test_ternarybit;


-----------------------------
-- Creating aggregate functions
--	you can also define aggregate functions. The syntax is somewhat
--	cryptic but the idea is to express the aggregate in terms of state
--	transition functions.
-----------------------------

-- CREATE AGGREGATE ternarybit_sum (
--    sfunc = ternarybit_add,
--    basetype = ternarybit,
--    stype = ternarybit,
--    initcond = '(0,0)'
-- );

-- SELECT ternarybit_sum(a) FROM test_ternarybit;


-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators

-- CREATE FUNCTION c_less(ternarybit, ternarybit) RETURNS bool
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;
-- CREATE FUNCTION c_leq(ternarybit, ternarybit) RETURNS bool
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;
-- CREATE FUNCTION c_equal(ternarybit, ternarybit) RETURNS bool
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;
-- CREATE FUNCTION c_geq(ternarybit, ternarybit) RETURNS bool
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;
-- CREATE FUNCTION c_greater(ternarybit, ternarybit) RETURNS bool
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;
-- CREATE FUNCTION c_not_equal(ternarybit, ternarybit) RETURNS bool
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;

-- CREATE OPERATOR < (
--    leftarg = ternarybit, rightarg = ternarybit, procedure = c_less,
--    -- commutator = > , negator = >= ,
--    restrict = scalarltsel, join = scalarltjoinsel
-- );
-- CREATE OPERATOR <= (
--    leftarg = ternarybit, rightarg = ternarybit, procedure = c_leq,
--    -- commutator = >= , negator = > ,
--    restrict = scalarlesel, join = scalarlejoinsel
-- );
-- CREATE OPERATOR = (
--    leftarg = ternarybit, rightarg = ternarybit, procedure = c_equal,
--    commutator = = ,
--    -- leave out negator since we didn't create <> operator
--    -- negator = <> ,
--    restrict = eqsel, join = eqjoinsel
-- );

-- CREATE OPERATOR >= (
--    leftarg = ternarybit, rightarg = ternarybit, procedure = c_geq,
--    -- commutator = <= , negator = < ,
--    restrict = scalargesel, join = scalargejoinsel
-- );

-- CREATE OPERATOR <> (
--    leftarg = ternarybit, rightarg = ternarybit, procedure = c_not_equal,
--    -- commutator = <= , negator = < ,
--    restrict = neqsel, join = neqjoinsel
-- );

-- CREATE OPERATOR > (
--    leftarg = ternarybit, rightarg = ternarybit, procedure = c_greater,
--    -- commutator = < , negator = <= ,
--    restrict = scalargtsel, join = scalargtjoinsel
-- );

-- -- create the support function too
-- CREATE FUNCTION network_cmp(ternarybit, ternarybit) RETURNS int4
--    AS '_OBJWD_/ternarybit' LANGUAGE C IMMUTABLE STRICT;

-- -- now we can make the operator class

-- CREATE OPERATOR CLASS ternarybit_abs_ops
--     DEFAULT FOR TYPE ternarybit USING btree AS
--         OPERATOR        1       < ,
--         OPERATOR        2       <= ,
--         OPERATOR        3       = ,
--         OPERATOR        4       >= ,
--         OPERATOR        5       > ,
--         FUNCTION        1       network_cmp(ternarybit, ternarybit);


-- -- now, we can define a btree index on ternarybit types. First, let's populate
-- -- the table. Note that postgres needs many more tuples to start using the
-- -- btree index during selects.
-- INSERT INTO test_ternarybit VALUES ('192.168.100.1', '192.168.100.1');
-- INSERT INTO test_ternarybit VALUES ('y', 'x');

-- -- CREATE INDEX test_cplx_ind ON test_ternarybit
-- --    USING btree(a ternarybit_abs_ops);

-- SELECT * from test_ternarybit where a = '192.168.100.1';
-- SELECT * from test_ternarybit where a = '192.168.100.2';
-- SELECT * from test_ternarybit where a < '192.168.100.20';
-- SELECT * from test_ternarybit where a < '192.168.99.20';
-- SELECT * from test_ternarybit where a > '192.168.99.20';
-- SELECT * from test_ternarybit where a > '192.168.100.0';
-- SELECT * from test_ternarybit where a > '192.168.100.0';
-- SELECT * from test_ternarybit where NOT (a = '192.168.100.0');


-- clean up the example
DROP TABLE test_ternarybit;
DROP TYPE ternarybit CASCADE;
