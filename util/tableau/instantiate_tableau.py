import sys
from os.path import dirname, abspath, join

root = dirname(dirname(dirname(abspath(__file__))))
print(root)

import faure_translator.databaseconfig as cfg
import psycopg2
from psycopg2.extras import execute_values

conn = psycopg2.connect(host=cfg.postgres["host"], database=cfg.postgres["db"], user=cfg.postgres["user"], password=cfg.postgres["password"])
cursor = conn.cursor()

def instantiate_tableau(ctable, mapping, out_table):
    """
    This is used to instantiate a instance for ctable

    Parameters:
    -------------
    ctable: string
        a ctable name stored in the database
    
    mapping: dictionary
        The mappig of variable and values generated by z3 Solver.model()
    
    out_table:
        a database table name that stores the instance of the ctable
    """
    cursor.execute("select * from {table}".format(table=ctable))
    row_count = cursor.rowcount

    tuples = []
    cols = [row[0] for row in cursor.description]
    for i in range(row_count):
        t = []
        row = cursor.fetchone()
        for j in range(len(row)):
            if cols[j] == 'condition':
                t.append('{}')
                continue
            node = row[j]
            if node in mapping.keys():
                t.append(mapping[node])
            else:
                t.append(node)
        tuples.append(tuple(t))
    
    cursor.execute("drop table if exists {out_table}".format(out_table=out_table))
    cursor.execute("create table {out_table} as select * from {table} where 1 = 2".format(out_table=out_table, table=ctable))

    nodup_tuples = []
    for t in tuples:
        if t not in nodup_tuples:
            nodup_tuples.append(t)
        
    print("{}: ".format(out_table), nodup_tuples)
    sql = "insert into {out_table} values %s".format(out_table=out_table)
    execute_values(cursor, sql, nodup_tuples)

    conn.commit()

def gen_mapping(model):
    """
    This is used to convert the variable assigments generated by Z3 Solver.model()

    Parameters:
    --------------
    model: z3.FuncDeclRef Class

    Returns:
    --------------
    mapping_dict: dictionary
        {variable: value}
    """
    mapping_dict = {}
    vars = model.decls()
    for var in vars:
        key = "{}".format(var)
        mapping_dict[key] = "{}".format(model[var])
    return mapping_dict

