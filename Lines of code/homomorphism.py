import random
import psycopg2

def convert_tableau_to_sql(tableau, tablename, overlay_nodes):
    """
    Convert tableau to corresponding SQL

    Parameters:
    ------------
    tableau : list 
        The tableau tuples(non self-connected) and self-connected tuples in forwarding order, 
        generated by gen_tableau() function (tuples + self_tuples) or retrieved from database table.
        For example, path 1 -> 2 -> 3, the tableau tuples are [(1, 5, {}), (5, 2, {}), (2, 3, {}), (1, 1, {}), (2, 2, {})], 
        node 2 is split into 2 and 5(interface, calculated by adding 2 and the max value among the virtual nodes, here is 3).

    tablename : string 
        The name of data table in database that stores the tableau

    overlay_nodes : list
        the list of constant nodes in overlay network

    Returns:
    ------------
    sql : string
        The sql string that can directly run in Postgres 
    """
    # cols = []
    tables = []
    constraints = []
    
    last = ""
    var_dict = {}
    # max_val = get_max(overlay_nodes)
    for i in range(len(tableau)):
        tables.append("{} t{}".format(tablename, i))
        # (n1, n2, _) = tableau[i]
        n1 = tableau[i][0]
        n2 = tableau[i][1]

        if n1.isdigit():
            # if n1 in overlay_nodes or str(int(n1)-max_val) in overlay_nodes:
            #     if n1 != n2 and n1 != last:
            #         # cols.append("t{}.n1".format(i))
            #         cols.append(n1)
            constraints.append("t{}.n1 = '{}'".format(i, n1))
        
        if n2.isdigit():
            # if n2 in overlay_nodes or str(int(n2)-max_val) in overlay_nodes:
            #     if n1 != n2:
            #         # cols.append("t{}.n2".format(i))
            #         cols.append(n2)
            constraints.append("t{}.n2 = '{}'".format(i, n2))

        if n1 == last and not n1.isdigit():
            constraints.append("t{}.n2 = t{}.n1".format(i-1, i))
            var_dict[n1] = i

        if not n1.isdigit() and not n2.isdigit() and n1 == n2:
            constraints.append("t{}.n1 = t{}.n2".format(i, i))
            if n1 in var_dict.keys():
                constraints.append("t{}.n1 = t{}.n2".format(var_dict[n1], i))

        last = n2
    # print(cols)
    # print(tables)
    # print(constraints)
    sql = "select " + ", ".join(overlay_nodes) + " from " + ", ".join(tables) + " where " + " and ".join(constraints)
    print(sql)
    return sql